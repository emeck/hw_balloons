/*******************
 * Create balloons *
 *******************/
Function p_CreateBalloons()
    For Local i = 1 To balloons
        balloon[i] = balloon:new()                  ;create new balloon object
    Next
EndFunction


/*****************
 * Move balloons *
 *****************/
Function p_MoveBalloons()
    BeginRefresh()
    For Local i = 1 To balloons
        balloon[i]:move()                                               ;move balloon object
    Next
    EndRefresh()
EndFunction


/***************************
 * Check if balloon is hit *
 ***************************/
Function p_Burst()
    Local mx, my = MouseX(), MouseY()		                            ;store mouse position when clicked

    For Local i = balloons To 1 Step -1                                 ;negative step so click works on balloon "on top" in case of overlapping with other
        If balloon[i].notPopped
            Local bx, by = balloon[i].x, balloon[i].y                   ;copy balloon position

            ;check if balloon sprite was hit
	        If mx > bx And mx < bx + 54 And my > by And my < by + 70
	            balloon[i]:pop()                                        ;remove popped balloon
                RemoveSprite(scores[player.score])
                player.score = player.score + 1
	            DisplaySprite(scores[player.score], 70, 5)				;update score: shows next frame of scores sprite
	            If player.score = balloons
					player.time = GetTimer(1) / 1000 ;get elapsed time
					Local time$ = p_CompareTimes()
		            p_GameOver(time$)					
	            EndIf
	            Break
            EndIf
        EndIf
    Next
EndFunction


/********************************************
 * Create scores and display starting score *
 ********************************************/
Function p_CreateScore()
    scoreText = CreateTextObject(Nil, catalog$[10])				;create "Score" text

    For Local i = 0 To balloons
	    CreateTextObject(1, PadNum(i, 2))                               ;create numbers for score as text objects
	    scores[i] = CreateSprite(Nil, #TEXTOBJECT, 1)                   ;convert numbers to sprites
        FreeTextObject(1)		                                        ;free memory of no longer deeded text objects
    Next

    DisplayTextObject(scoreText, 10, 4)                                 ;display "Score" text
    DisplaySprite(scores[player.score], 70, 4)                          ;display starting score
EndFunction


/**********************
 * Create time sprite *
 **********************/
Function p_CreateCountdown()
    timeText = CreateTextObject(Nil, catalog$[4]..": ")					;create "Time" text

    For Local i = 0 To time
        CreateTextObject(1, PadNum(time - i, 2))                        ;create timer numbers as text objects starting at 10
        countdown[i] = CreateSprite(Nil, #TEXTOBJECT, 1)                ;convert numbers to sprites
        FreeTextObject(1)
    Next

    For Local i = 0 To time
        CreateTextObject(i, PadNum(time - i, 2))                        ;create timer numbers as text objects starting at 10
    Next

    DisplayTextObject(timeText, 550, 4)                                 ;display "Time" text
    DisplaySprite(countdown[0], 600, 4)                                 ;display starting time
EndFunction


/************************
 * Check time countdown *
 ************************/
Function p_Countdown()
    ;remember that time sprites run from 10 to 0
    Local t = Int(GetTimer(1) / 1000)       ;get next second

    ;when resuming after a pause, the display is redrawn and the time sprite is not in sync with the timer
    ;this checks for the sprite displayed when pausing and removes it before the next is displayed
    If t > 0
        If GetAttribute(#SPRITE, countdown[t-1], #ATTRONSCREEN) Then RemoveSprite(countdown[t-1])
    EndIf
    
    If t => time
	    DisplaySprite(countdown[t], 600, 4) ;display last time sprite (countdown[10]) which is 0
	    p_GameOver("lose")
    Else
        DisplaySprite(countdown[t], 600, 4) ;display next time sprite
    EndIf
EndFunction


/*************
 * Game over *
 *************/
Function p_GameOver(endText$)
    StopTimer(1)
    ClearInterval(2)
    ClearInterval(1)

    done = True             ;game is over

    RemoveSprites(True)     ;remove sprites but keep graphics displayed so box can be draw on top

    Box(0, 0, 640, 480, Color = #GRAY, {Transparency = "50%"})

    SetFont(#SANS, 36, {Engine = #FONTENGINE_INBUILT})
    SetFontStyle(#BOLD)
    SetFontStyle(#ANTIALIAS)

    If endText$ = "lose"
		PlaySample(6)
	    TextOut(#CENTER, #CENTER, catalog$[13])
	ElseIf endText$ = "high"
		PlaySample(5)
	    TextOut(#CENTER, #CENTER - 50, catalog$[16])
    Else
		PlaySample(5)
	    TextOut(#CENTER, #CENTER, catalog$[14])
    EndIf

    Wait(100)
    TextOut(#CENTER, 260, catalog$[15])
	
	;Yes/No buttons
	DisplayBrush(5, 210, 330, {Width = 100, Height = 50})
	DisplayBrush(6, 330, 330, {Width = 100, Height = 50})
	buttonYesText = CreateTextObject(Nil, catalog$[11], {Encoding=utf8})
	DisplayTextObject(buttonYesText, 230, 340)
	buttonNoText = CreateTextObject(Nil, catalog$[12], {Encoding=utf8})
	DisplayTextObject(buttonNoText, 370, 340)
	button6 = MakeButton(Nil, #SIMPLEBUTTON, 210, 330, 100, 50, evttable)
	button7 = MakeButton(Nil, #SIMPLEBUTTON, 330, 330, 100, 50, evttable)
EndFunction


/************
 * Clean up *
 ************/
Function p_CleanUp()
    For Local i = 0 To balloons
	    FreeSprite(scores[i])             ;free sprites created for score
    Next

    For Local i = 0 To time
	    FreeSprite(countdown[i])           ;free sprites created for timer
    Next

    For Local i = 1 To balloons
	    FreeSprite(balloon[i].sprite)     ;free sprites created for balloons
    Next

    FreeTextObject(scoreText)             ;free text objects
    FreeTextObject(timeText)

    player.score = 0
EndFunction


